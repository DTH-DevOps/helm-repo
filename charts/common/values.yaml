global:
  imageRegistry: ""
  imagePullSecrets: [ ]

nameOverride: ""
fullnameOverride: ""

replicaCount: 1
updateStrategy: { }
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%

revisionHistoryLimit: 1

imagePullSecrets: ""

image:
  repository: ""
  name: ""
  tag: ""
  pullPolicy: IfNotPresent

command: ""
args: ""

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# List of services
services:
  - name: http
    type: ClusterIP
    annotations: { }
    specs:
      - port: 8080
        targetPort: 8080
        name: http

config: { }

annotations: { }

secretMounts: { }

extraVolumes: [ ]

extraVolumeMounts: [ ]

persistence:
  enabled: false

ephemeralVolume:
  enabled: false
  #name: cache
  #mounthPath: /cache

resources: { }
#  requests:
#    cpu: 50m
#    memory: 128Mi
#  limits:
#    cpu: 100m
#    memory: 256Mi

startupProbe:
  enabled: false

## Configure extra options for service containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe
## @skip livenessProbe.httpGet
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: false
  #  httpGet:
  #    path: ""
  #    port: http
  #    scheme: HTTP
  ## If using an HTTPS-terminating load-balancer, the probes may need to behave
  ## like the balancer to prevent HTTP 302 responses. According to the Kubernetes
  ## docs, 302 should be considered "successful", but this issue on GitHub
  ## (https://github.com/kubernetes/kubernetes/issues/47893) shows that it isn't.
  ## E.g.
  ## httpHeaders:
  ## - name: X-Forwarded-Proto
  ##   value: https
  ##
#    httpHeaders: [ ]
#  initialDelaySeconds: 120
#  periodSeconds: 10
#  timeoutSeconds: 5
#  failureThreshold: 6
#  successThreshold: 1

## @param readinessProbe.enabled Enable readinessProbe
## @skip readinessProbe.httpGet
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
##
readinessProbe:
  enabled: false
  #  httpGet:
  #    path: /wp-login.php
  #    port: http
  #    scheme: HTTP
  ## If using an HTTPS-terminating load-balancer, the probes may need to behave
  ## like the balancer to prevent HTTP 302 responses. According to the Kubernetes
  ## docs, 302 should be considered "successful", but this issue on GitHub
  ## (https://github.com/kubernetes/kubernetes/issues/47893) shows that it isn't.
  ## E.g.
  ## httpHeaders:
  ## - name: X-Forwarded-Proto
  ##   value: https
  ##
  #    httpHeaders: [ ]
  #  initialDelaySeconds: 30
  #  periodSeconds: 10
  #  timeoutSeconds: 5
  #  failureThreshold: 6
  #  successThreshold: 1

ingress:
  enabled: false
  className: nginx
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      servicePort: 8000
      serviceName: web
      path: /
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

tolerations: [ ]

affinity: { }

nodeSelector: { }

extraContainers: [ ]

initContainers: [ ]